import os,sys,inspect
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
parentdir = os.path.dirname(currentdir)
sys.path.insert(0,parentdir)
from hvass_utils import cifar10

import keras
from keras.datasets import cifar10
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten, InputLayer
from keras.layers import Conv2D, MaxPooling2D
from keras.callbacks import TensorBoard
from sklearn.model_selection import train_test_split
import os

log_dir = os.getcwd() + '/CNN_cifar10_kdata'
data_path = parentdir + '/cifar10_data/'


batch_size = 32
num_classes = 10
epochs = 100
data_augmentation = True

(images_train, y_train), (images_test, labels_test) = cifar10.load_data()
print('x_train shape:', images_train.shape)
print(images_train.shape[0], 'train samples')
print(images_test.shape[0], 'test samples')

# Convert class vectors to binary class matrices.
y_train = keras.utils.to_categorical(y_train, num_classes)
y_test = keras.utils.to_categorical(labels_test, num_classes)

images_train, images_val, labels_train,labels_val = train_test_split(images_train,y_train, test_size=0.2)

model = Sequential()
model.add(InputLayer(input_shape=(32,32,3)))
model.add(Conv2D(32, (3, 3), padding='same',
                 input_shape=images_train.shape[1:]))
model.add(Activation('relu'))
model.add(Conv2D(32, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Conv2D(64, (3, 3), padding='same'))
model.add(Activation('relu'))
model.add(Conv2D(64, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Flatten())
model.add(Dense(512))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(num_classes))
model.add(Activation('softmax'))

# initiate RMSprop optimizer
opt = keras.optimizers.nadam(lr=0.001, schedule_decay=1e-4)

# Let's train the model using RMSprop
model.compile(loss='categorical_crossentropy',
              optimizer=opt,
              metrics=['accuracy'])

# scale input data
x_train = images_train.astype('float32')
x_val = images_val.astype('float32')
x_test = images_test.astype('float32')
x_train /= 255
x_test /= 255
x_val /= 255


# early stopping
early_stopping = keras.callbacks.EarlyStopping(monitor='val_loss', min_delta=0, patience=10, verbose=1, mode='auto')
ckpt= keras.callbacks.ModelCheckpoint(log_dir+'/saved_model_checkpoint', monitor='val_loss', verbose=0, save_best_only=True, save_weights_only=False, mode='auto', period=1)
tensorboard = TensorBoard(log_dir=log_dir + "/tensorboard/run1", histogram_freq=1, write_graph=True, write_images=False)

# super simple learning rate schedule
def step_decay(epoch):
    initial_lrate = float(0.0001)
    if epoch > 30:

        return float(0.00001)
    if epoch > 50:
        return float(0.000001)
    else:
        return initial_lrate

change_lr = keras.callbacks.LearningRateScheduler(step_decay)

if not data_augmentation:
    print('Not using data augmentation.')
    model.fit(x_train, labels_train,
              batch_size=batch_size,
              epochs=epochs,
              validation_data=(x_val, labels_val),
              shuffle=True, callbacks=[tensorboard,ckpt,early_stopping,change_lr])
else:
    print('Using real-time data augmentation.')
    # This will do preprocessing and realtime data augmentation:
    datagen = ImageDataGenerator(
        featurewise_center=False,  # set input mean to 0 over the dataset
        samplewise_center=False,  # set each sample mean to 0
        featurewise_std_normalization=False,  # divide inputs by std of the dataset
        samplewise_std_normalization=False,  # divide each input by its std
        zca_whitening=False,  # apply ZCA whitening
        rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
        horizontal_flip=True,  # randomly flip images
        vertical_flip=False)  # randomly flip images

    # Compute quantities required for feature-wise normalization
    # (std, mean, and principal components if ZCA whitening is applied).
    datagen.fit(x_train)

    # Fit the model on the batches generated by datagen.flow().
    model.fit_generator(datagen.flow(x_train, labels_train,
                                     batch_size=batch_size),
                        epochs=epochs,
                        validation_data=(x_val, labels_val),
                        workers=4, callbacks=[tensorboard,ckpt,early_stopping,change_lr])


print(model.summary())

# Score trained model.
scores = model.evaluate(x_test, labels_test, verbose=1)
print('Test loss:', scores[0])
print('Test accuracy:', scores[1])

del model # purge model from memory


print('tensorboard --logdir=%s' % log_dir + "/tensorboard/run1")